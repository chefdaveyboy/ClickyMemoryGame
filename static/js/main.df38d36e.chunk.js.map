{"version":3,"sources":["components/header.js","components/jumbotron.js","components/gameContainer.js","components/image/card.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","direction","score","topScore","Jumbotron","GameContainer","children","ImageCard","alt","name","src","image","onClick","clicked","id","shuffle","array","i","length","j","Math","floor","random","App","state","images","instruction","clickedImage","indexOf","push","handleIncrement","shuffleImages","setState","console","log","directions","this","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ipCAwBeA,MAtBf,SAAgBC,GACZ,OACI,6BACI,yBAAKC,UAAU,0CACX,yBAAKA,UAAU,OACX,wBAAIA,UAAU,cAAd,yBAEJ,yBAAKA,UAAU,OACX,wBAAIA,UAAU,eAAeD,EAAME,YAEvC,yBAAKD,UAAU,OACX,wBAAIA,UAAU,eAAd,UAAoCD,EAAMG,MAA1C,iBAA+DH,EAAMI,cCG1EC,MAbf,WACI,OACI,6BACI,yBAAKJ,UAAU,kBACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,yBAAd,gBACA,uBAAGA,UAAU,oBAAb,gFCGLK,MATf,SAAuBN,GACnB,OACI,yBAAKC,UAAY,aACb,yBAAKA,UAAU,OAAOD,EAAMO,UAC5B,yBAAKN,UAAU,U,MCgBZO,MAhBf,SAAmBR,GACf,OACI,6BACA,yBAAKC,UAAU,YACX,yBACAA,UAAU,WACVQ,IAAMT,EAAMU,KACZC,IAAKX,EAAMY,MACXC,QAAW,kBAAMb,EAAMc,QAAQd,EAAMe,U,aCNjD,SAASC,EAAQC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADD,EAElB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkC,KAE9BD,EAAMG,GAFwB,KAI3C,OAAOH,E,IA2FMO,E,4MAtFbC,MAAQ,CACNC,SACAC,YAAa,8BACbxB,MAAO,EACPC,SAAU,EACVwB,aAAc,I,EAIhBd,QAAU,SAACC,GAET,IAAIZ,EAAQ,EAAKsB,MAAMtB,MACnBC,EAAW,EAAKqB,MAAMrB,SACtBwB,EAAe,EAAKH,MAAMG,cAEI,IAA9BA,EAAaC,QAAQd,IACvBa,EAAaE,KAAKf,GAClB,EAAKgB,kBACL,EAAKC,iBAGL,EAAKC,SAAS,CACZ/B,UAAW,yCACXC,MAAO,EACPyB,aAAc,KAIdzB,EAAQC,GACV,EAAK6B,SAAS,CACZ7B,SAAUD,IAIc,KAAxByB,EAAaT,SACfe,QAAQC,IAAI,YACZ,EAAKF,SAAS,CACZG,WAAY,+CACZjC,MAAO,EACPyB,aAAc,O,EAMpBG,gBAAkB,WAEhB,EAAKE,SAAS,CACZ9B,MAAO,EAAKsB,MAAMtB,MAAQ,EAC1BD,UAAW,iB,EAKf8B,cAAgB,WACd,EAAKC,SAAS,CAACP,OAAQV,EAAQU,M,uDAGvB,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACAxB,UAAamC,KAAKZ,MAAMvB,UACxBC,MAASkC,KAAKZ,MAAMtB,MACpBC,SAAYiC,KAAKZ,MAAMrB,WAEvB,kBAAC,EAAD,MACA,kBAAC,EAAD,KACCiC,KAAKZ,MAAMC,OAAOY,KAAI,SAAA1B,GAAK,OAC1B,kBAAC,EAAD,CACEG,GAAIH,EAAMG,GACVwB,IAAK3B,EAAMG,GACXL,KAAME,EAAMF,KACZI,QAAS,EAAKA,QACdF,MAAOA,EAAMA,iB,GA5EP4B,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.df38d36e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar fixed-top navbar-light bg-light\">\r\n                <div className=\"col\">\r\n                    <h1 className=\"float-left\">Seinfeld Clicky Game</h1>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h2 className=\"text-center\">{props.direction}</h2>\r\n                </div>\r\n                <div className=\"col\">\r\n                    <h2 className=\"float-right\">Score: {props.score} | Top Score: {props.topScore}</h2>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n        )\r\n    }\r\n                            \r\n                            \r\n            \r\n            \r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div>\r\n            <div className=\"jumbotron mt-5\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"display-4 text-center\">Clicky Game!</h1>\r\n                    <p className=\"lead text-center\">Click on an image to earn points, but don't click on any more than once!</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\n\r\n\r\nfunction GameContainer(props) {\r\n    return (\r\n        <div className = \"container\">\r\n            <div className=\"row\">{props.children}</div>\r\n            <div className=\"row\"></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GameContainer;","import React from \"react\";\r\nimport \"./card.css\"\r\n\r\n\r\n\r\n\r\n\r\nfunction ImageCard(props) {\r\n    return (\r\n        <div>\r\n        <div className=\"card col\">\r\n            <img \r\n            className=\"card-img\" \r\n            alt= {props.name}\r\n            src={props.image}\r\n            onClick = {() => props.clicked(props.id)}\r\n            />\r\n            \r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageCard;","import React, { Component } from 'react';\n\nimport Header from \"./components/header\";\nimport Jumbotron from \"./components/jumbotron\";\nimport GameContainer from './components/gameContainer';\nimport ImageCard from './components/image/card';\nimport images from \"./images.json\";\nimport Footer from \"./components/footer\";\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n\n  state = {\n    images,\n    instruction: \"Click on an image to begin!\",\n    score: 0,\n    topScore: 0,\n    clickedImage: []\n  };\n\n\n  clicked = (id) => {\n    \n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    let clickedImage = this.state.clickedImage;\n\n    if (clickedImage.indexOf(id) === -1) {\n      clickedImage.push(id);\n      this.handleIncrement();\n      this.shuffleImages();\n    }\n    else {\n      this.setState({\n        direction: \"No soup for you!  Come back, ONE YEAR!\",\n        score: 0,\n        clickedImage: []\n      });\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n\n    if (clickedImage.length === 12) {\n      console.log(\"You win!\");\n      this.setState({\n        directions: \"Congrats! You are the Master of Your Domain!\",\n        score: 0,\n        clickedImage: []\n      });\n\n    }\n  };\n\n  handleIncrement = () => {\n\n    this.setState({\n      score: this.state.score + 1,\n      direction: \"Keep going!\"\n      });\n    \n  };\n\n  shuffleImages = () => {\n    this.setState({images: shuffle(images)});\n  };\n\n  render() {\n    return (\n      <div>\n        <Header \n        direction = {this.state.direction}\n        score = {this.state.score}\n        topScore = {this.state.topScore}\n        />\n        <Jumbotron/>\n        <GameContainer>\n        {this.state.images.map(image => (\n          <ImageCard\n            id={image.id}\n            key={image.id}\n            name={image.name}\n            clicked={this.clicked}\n            image={image.image}\n            />\n        ))}\n        </GameContainer>\n        \n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}